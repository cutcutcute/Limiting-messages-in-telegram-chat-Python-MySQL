

from database.database import DatabaseObject
from botAttr import BotConfig, ADMIN_CONFIG
from utils.filters import startMessage, groupByHandler, messageForUser
from keyboards.buttons import settings_markup, common_config_markup, back_to_menu_mrkp, personaly_user_settings, change_time_user_mrkp
from fStateMachine.fillStateMachine import FsmFillState

from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiogram.filters.text import Text
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.fsm.storage.memory import MemoryStorage


from logging import StreamHandler
import asyncio
import logging
import sys
import os

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = StreamHandler(stream=sys.stdout)
handler.setFormatter(logging.Formatter(fmt = '[%(asctime)s: %(levelname)s] %(message)s'))
logger.addHandler(handler)


MAX_USERS_ON_PAGE = 4

botCfg : BotConfig = BotConfig()
db: DatabaseObject = DatabaseObject()
groupById = botCfg.groupId
botToken = None

try:
    botToken = botCfg.botToken
except TypeError as ex:
    logger.exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á bot_token –≤ —Ñ–∞–π–ª–µ cfg.yml: _{ex}")
    sys.exit(1)


bot : Bot =  Bot(token=botToken, parse_mode="HTML")
dp : Dispatcher = Dispatcher()
storage : MemoryStorage = MemoryStorage()





async def set_main_menu(bot:Bot):
    main_menu_commands = [

        BotCommand(command = '/start', description='–ù–∞—á–∞—Ç—å'),


    ]
    await bot.set_my_commands(main_menu_commands)









@dp.message(startMessage)
async def startMessageHandler(message : Message, state : FSMContext) -> None:
    try:
        if message.chat.id != botCfg.adminId:
            await bot.send_message(chat_id = message.chat.id, text = "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–≤–µ–¥–∏—Ç–µ –≤–∞—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await state.set_state(FsmFillState.user_message_state)

        else:
            await bot.send_message(chat_id = message.chat.id, text = f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.chat.username}", reply_markup=settings_markup)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [startMessageHandler]. –û—à–∏–±–∫–∞: _{ex}")


@dp.message(StateFilter(FsmFillState.user_message_state))
async def getMessageForAdmin(message : Message, state : FSMContext):
    try:
        sample_text_for_admin = f"""
–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.chat.id}

<i>{message.text}</i>

–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ <code>@{message.chat.id}</code> –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç
"""
        await bot.send_message(chat_id = botCfg.adminId, text = sample_text_for_admin)
        await bot.send_message(chat_id=message.chat.id, text = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [startMessageHandler]. –û—à–∏–±–∫–∞: _{ex}")



@dp.message(messageForUser)
async def sendMessageForUser(message : Message) -> None:
    try:
        id = int(message.text.split(" ")[0].replace("@","").strip())


        text_sample = f"""
–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: 

<i>{" ".join(message.text.split()[1:])}</i>"""
        await bot.send_message(chat_id=id, text = text_sample)
        await bot.send_message(chat_id=message.chat.id, text = "–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [sendMessageForUser]. –û—à–∏–±–∫–∞: _{ex}")
        await bot.send_message(chat_id=message.chat.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

@dp.message(groupByHandler)
async def groupByHandler(message : Message) -> None:
    try:
        #–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
        userInfoDict, consoleStreamText = await BotConfig.getInfoAboutUser(message.text, **dict(message.from_user))


        user_telegram_id = userInfoDict.get("telegramId")


        if botCfg.messageConsoleStream:
            logger.info(consoleStreamText)

        permission = await db.addUserMessage(user_telegram_id)

        if permission == "NOTPERMISSION":

            text = BotConfig.message_excess_limit

            if "$limit" in text:
                text = text.replace("$limit", str(BotConfig.messages_limit))


            if "$hours" in text:
                text = text.replace("$hours", str(BotConfig.hours_for_limit))

            if "$user" in text:
                user = message.from_user.username if message.from_user.username else message.chat.id
                text = text.replace("$user", f"@{user}")



            message_for_delete = await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {message.from_user.username}!\n\n{text}")
            await message.delete()
            await asyncio.sleep(BotConfig.time_message_excess_limit_seconds)
            await bot.delete_message(chat_id = groupById, message_id=message_for_delete.message_id )





    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [groupByHandler]. –û—à–∏–±–∫–∞: _{ex}")




#–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.callback_query(Text(text = ["common_settings"]))
async def getCommonSettings(callback : CallbackQuery):
    try:
        await callback.answer()
        await bot.delete_message(chat_id = callback.from_user.id, message_id=callback.message.message_id)

        text = f"""<b>–û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß</b>
        
‚ö´Ô∏è –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö: <code>{BotConfig.hours_for_limit}</code>

‚ö´Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{BotConfig.messages_limit}</code>

‚ö´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:  

    <code>{BotConfig.message_excess_limit}</code>

‚ö´Ô∏è–í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{BotConfig.time_message_excess_limit_seconds}</code>

<i>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</i>
"""

        await bot.send_message(chat_id= callback.from_user.id, text = text, reply_markup=common_config_markup)
    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [getCommonSettings]. –û—à–∏–±–∫–∞: {ex}")



@dp.callback_query(Text(text = ["user_settings"]))
async def getUserSettings(callback : CallbackQuery, state : FSMContext):
    try:
        text = ""
        await callback.answer()
        startSlice = 0
        endSlice = 0 + MAX_USERS_ON_PAGE



        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        users = await DatabaseObject().getAllUsers()

        await state.set_state(FsmFillState.paggination_users_state)
        await state.update_data(start = startSlice)
        await state.update_data(end = endSlice)

        button_previous : InlineKeyboardButton = InlineKeyboardButton(text = "–ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data = "prev")
        button_next : InlineKeyboardButton = InlineKeyboardButton(text = "–°–ª–µ–¥—É—é—â–∞—è", callback_data = "next")
        button_add_new_user : InlineKeyboardButton = InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûï", callback_data = "add_new_user")
        button_menu : InlineKeyboardButton = InlineKeyboardButton(text = "–ú–µ–Ω—é", callback_data = "back_to_menu")


        if users[endSlice: endSlice+1] == () and startSlice == 0:
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_add_new_user],[button_menu]])



        elif users[endSlice: endSlice+1] == ():
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_previous],[button_add_new_user],[button_menu]])

        elif users[endSlice: endSlice+1] != () and startSlice == 0:
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_next],[button_add_new_user], [button_menu]])

        else:
            paggination_mrkp : InlineKeyboardMarkup = InlineKeyboardMarkup(inline_keyboard = [[button_previous, button_next],[button_add_new_user] ,[button_menu]])


        for user in users[startSlice:endSlice]:
            text += await BotConfig.readyText(user, list_mode=True)

        await bot.send_message(chat_id = callback.from_user.id, text = text, reply_markup=paggination_mrkp)



    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [getUserSettings]. –û—à–∏–±–∫–∞: {ex}")





@dp.callback_query(Text(text = ["prev", "next"]))
async def pagginationUsers(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)

        data = await state.get_data()
        startSlice = data.get("start")
        endSlice = data.get("end")

        text = ""

        if callback.data == "prev":
            startSlice = int(startSlice) - MAX_USERS_ON_PAGE
            endSlice = int(endSlice) - MAX_USERS_ON_PAGE

        elif callback.data == "next":
            startSlice = int(startSlice) + MAX_USERS_ON_PAGE
            endSlice = int(endSlice) + MAX_USERS_ON_PAGE

        else:
            logger.warning("error")

        await state.update_data(start=startSlice)
        await state.update_data(end=endSlice)

        users = await DatabaseObject().getAllUsers()

        button_previous: InlineKeyboardButton = InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev")
        button_next: InlineKeyboardButton = InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è", callback_data="next")
        button_add_new_user: InlineKeyboardButton = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûï",
                                                                         callback_data="add_new_user")
        button_menu: InlineKeyboardButton = InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="back_to_menu")


        if users[endSlice: endSlice + 1] == () and startSlice == 0:
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_add_new_user], [button_menu]])



        elif users[endSlice: endSlice + 1] == ():
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_previous], [button_add_new_user],[button_menu]])

        elif users[endSlice: endSlice + 1] != () and startSlice == 0:
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_next],[button_add_new_user] ,[button_menu]])

        else:
            paggination_mrkp: InlineKeyboardMarkup = InlineKeyboardMarkup(
                inline_keyboard=[[button_previous, button_next],[button_add_new_user] ,[button_menu]])

        for user in users[startSlice:endSlice]:
            text += await BotConfig.readyText(user, list_mode=True)

        await bot.send_message(chat_id=callback.from_user.id, text=text, reply_markup=paggination_mrkp)

    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [pagginationUsers]. –û—à–∏–±–∫–∞: {ex}")






@dp.message(StateFilter(FsmFillState.paggination_users_state))
async def getInfoAboutUser(message : Message, state : FSMContext):
    try:
        user = await DatabaseObject().getInfoAboutUser(int(message.text))
        if not user:
            await bot.send_message(chat_id=message.chat.id, text = "–ü–æ–ª—å–∑–æ–≤–∞–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            info = await BotConfig.readyText(user)

            await bot.send_message(chat_id=message.chat.id, text = info, reply_markup=personaly_user_settings)

            await state.set_state(default_state)
    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [getInfoAboutUser]. –û—à–∏–±–∫–∞: {ex}")





#Change status
@dp.callback_query(Text(text = ["status_set"]))
async def setNewStatus(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()
        id = int(callback.message.text.split("|")[1])



        res = await DatabaseObject().changeUserStatus(id)

        if res:

            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            user = await DatabaseObject().getInfoAboutUser(id = id)
            info = await BotConfig.readyText(user)
            message_for_delete = await bot.send_message(chat_id = callback.from_user.id, text = "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
            await asyncio.sleep(2)
            await bot.send_message(chat_id=callback.from_user.id, text = info, reply_markup=personaly_user_settings)
            await bot.delete_message(chat_id=callback.from_user.id, message_id=message_for_delete.message_id)

        else:
            await bot.send_message(chat_id=callback.from_user.id, text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [setNewStatus]. –û—à–∏–±–∫–∞: {ex}")



@dp.callback_query(Text(text = ["set_time_user"]))
async def setTimeForPremium(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()

        id = int(callback.message.text.split("|")[1])

        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)


        await state.update_data(id_for_premium = id)
        await bot.send_message(chat_id=callback.from_user.id, text = "–£–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω—É–∂–Ω–æ –¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=change_time_user_mrkp)
        await state.set_state(FsmFillState.set_hours_time_state)
    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [setTimeForPremium]. –û—à–∏–±–∫–∞: {ex}")


@dp.callback_query(Text(text = ["clear_current_time"]))
async def clearCurrentTime(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        data = await state.get_data()
        id = data.get("id_for_premium")
        res = await DatabaseObject().updateTimeStartFinish(id = id)
        if res:
            await bot.send_message(chat_id = callback.from_user.id, text=  "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            user = await DatabaseObject().getInfoAboutUser(id = id)
            if not user:
                await bot.send_message(chat_id=callback.from_user.id, text="–ü–æ–ª—å–∑–æ–≤–∞–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                info = await BotConfig.readyText(user)

                await bot.send_message(chat_id=callback.from_user.id, text=info, reply_markup=personaly_user_settings)

        else:
            await bot.send_message(chat_id= callback.from_user.id, text= "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è")
    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [clearCurrentTime]. –û—à–∏–±–∫–∞: {ex}")


@dp.message(StateFilter(FsmFillState.set_hours_time_state))
async def setHoursTimeForUser(message : Message, state : FSMContext):
    try:
        if not message.text.isdigit():
            await bot.send_message(chat_id=message.chat.id, text = "–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=back_to_menu_mrkp)
        else:
            data = await state.get_data()
            id = data.get("id_for_premium")
            res = await DatabaseObject().updateTimeStartFinish(id, int(message.text))
            if res:
                await bot.send_message(chat_id=message.chat.id, text = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                await asyncio.sleep(2)
                user = await DatabaseObject().getInfoAboutUser(id=id)
                info = await BotConfig.readyText(user)
                await bot.send_message(chat_id=message.chat.id, text = info, reply_markup=personaly_user_settings)



                ##
            else:
                await  bot.send_message(chat_id=message.chat.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [setHoursTimeForUser]. –û—à–∏–±–∫–∞: {ex}")




@dp.callback_query(Text(text = ["change_hours_limit", "change_message_limit", "change_message_excess_limit", "change_time_message_excess_limit_seconds"]))
async def changeCommonSettings(callback : CallbackQuery, state : FSMContext):
    try:

        await callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)


        if callback.data == "change_hours_limit":
            await state.set_state(FsmFillState.hours_for_limit_state)

            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞ —á–∞—Å–∞—Ö –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Ä–∞—Å—á–µ—Ç (–≤ —á–∞—Å–∞—Ö)",
                                   reply_markup=back_to_menu_mrkp)


        elif callback.data == "change_message_limit":
            await state.set_state(FsmFillState.messages_limit_state)

            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π",
                                   reply_markup=back_to_menu_mrkp)

        elif callback.data == "change_message_excess_limit":
            await state.set_state(FsmFillState.message_excess_limit_state)

            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞",
                                   reply_markup=back_to_menu_mrkp)

        elif callback.data == "change_time_message_excess_limit_seconds":
            await state.set_state(FsmFillState.time_message_excess_limit_seconds_state)

            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
                                   reply_markup=back_to_menu_mrkp)

        else:
            logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeCommonSettings]")

    except Exception as ex:
        logger.exception(f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeCommonSettings]. –û—à–∏–±–∫–∞: {ex}")




#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–∞—Å–∞—Ö
@dp.message(StateFilter(FsmFillState.hours_for_limit_state))
async def changeHoursForLimitsState(message : Message, state : FSMContext):
    try:
        if message.chat.id != botCfg.adminId:
            await bot.send_message(chat_id = message.chat.id, text = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        else:

            if not message.text.isdigit():
                await bot.send_message(chat_id = message.chat.id, text = "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ")
            else:
                ADMIN_CONFIG["hours_for_limit"] = int(message.text)
                await BotConfig.setNewCommonParams(**ADMIN_CONFIG)

                text = f"""<b>–û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß</b>

‚ö´Ô∏è –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö: <code>{BotConfig.hours_for_limit}</code>

‚ö´Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{BotConfig.messages_limit}</code>

‚ö´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:  

    <code>{BotConfig.message_excess_limit}</code>

‚ö´Ô∏è–í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{BotConfig.time_message_excess_limit_seconds}</code>


<i>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</i>
                """

                await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=common_config_markup)
                await state.set_state(default_state)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeHoursForLimitsState]. –û—à–∏–±–∫–∞: _{ex}")



#–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(StateFilter(FsmFillState.message_excess_limit_state))
async def changeMessageExcessLimit(message : Message, state : FSMContext):
    try:
        if message.chat.id != botCfg.adminId:
            await bot.send_message(chat_id = message.chat.id, text = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        else:

            ADMIN_CONFIG["message_excess_limit"] = message.text
            await BotConfig.setNewCommonParams(**ADMIN_CONFIG)

            text = f"""<b>–û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß</b>

‚ö´Ô∏è –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö: <code>{BotConfig.hours_for_limit}</code>

‚ö´Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{BotConfig.messages_limit}</code>

‚ö´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:  

    <code>{BotConfig.message_excess_limit}</code>

‚ö´Ô∏è–í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{BotConfig.time_message_excess_limit_seconds}</code>


<i>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</i>
                """

            await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=common_config_markup)
            await state.set_state(default_state)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeMessageExcessLimit]. –û—à–∏–±–∫–∞: _{ex}")






@dp.message(StateFilter(FsmFillState.messages_limit_state))
async def changeMessagesLimit(message : Message, state : FSMContext):
    try:
        if message.chat.id != botCfg.adminId:
            await bot.send_message(chat_id = message.chat.id, text = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        else:

            if not message.text.isdigit():
                await bot.send_message(chat_id = message.chat.id, text = "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ")
            else:
                ADMIN_CONFIG["messages_limit"] = int(message.text)
                await BotConfig.setNewCommonParams(**ADMIN_CONFIG)

                text = f"""<b>–û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß</b>

‚ö´Ô∏è –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö: <code>{BotConfig.hours_for_limit}</code>

‚ö´Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{BotConfig.messages_limit}</code>

‚ö´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:  

    <code>{BotConfig.message_excess_limit}</code>

‚ö´Ô∏è–í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{BotConfig.time_message_excess_limit_seconds}</code>


<i>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</i>
                """

                await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=common_config_markup)
                await state.set_state(default_state)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeMessagesLimit]. –û—à–∏–±–∫–∞: _{ex}")




@dp.message(StateFilter(FsmFillState.time_message_excess_limit_seconds_state))
async def changeTimeMessageExcessLimitSeconds(message : Message, state : FSMContext):
    try:
        if message.chat.id != botCfg.adminId:
            await bot.send_message(chat_id = message.chat.id, text = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        else:

            if not message.text.isdigit():
                await bot.send_message(chat_id = message.chat.id, text = "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ")
            else:
                ADMIN_CONFIG["time_message_excess_limit_seconds"] = int(message.text)
                await BotConfig.setNewCommonParams(**ADMIN_CONFIG)

                text = f"""<b>–û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß</b>

‚ö´Ô∏è –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö: <code>{BotConfig.hours_for_limit}</code>

‚ö´Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{BotConfig.messages_limit}</code>

‚ö´Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:  

    <code>{BotConfig.message_excess_limit}</code>

‚ö´Ô∏è–í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{BotConfig.time_message_excess_limit_seconds}</code>


<i>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</i>
                """

                await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=common_config_markup)
                await state.set_state(default_state)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeTimeMessageExcessLimitSeconds]. –û—à–∏–±–∫–∞: _{ex}")




@dp.callback_query(Text(text = ['back_to_menu']))
async def back_to_menu(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await bot.send_message(chat_id=callback.from_user.id, text=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å {callback.from_user.username}",
                               reply_markup=settings_markup)

        await state.set_state(default_state)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [back_to_menu]. –û—à–∏–±–∫–∞: _{ex}")


@dp.message(StateFilter(FsmFillState.add_new_user_state))
async def inputNewUserHandler(message : Message, state : FSMContext):
    try:
        if message.text.isdigit():
            res = await DatabaseObject().addNewUserInUsers(int(message.text))
            if res:
                await bot.send_message(chat_id = message.chat.id, text=  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=settings_markup)
                await state.set_state(default_state)
            else:
                await bot.send_message(chat_id = message.chat.id, text=  "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup= back_to_menu_mrkp)
        else:
            await bot.send_message(chat_id = message.chat.id, text = "–£–∫–∞–∂–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ–º", reply_markup=back_to_menu_mrkp)
    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [inputNewUserHandler]. –û—à–∏–±–∫–∞: _{ex}")



@dp.message(StateFilter(FsmFillState.add_comment_state))
async def setMessageComment(message : Message, state : FSMContext):
    try:
        if len(message.text) < 500:
            data = await state.get_data()
            id = data.get("idForComment")
            res = await  DatabaseObject().setCommetForUser(id, message.text)
            if res:
                await bot.send_message(chat_id=message.chat.id, text = "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=settings_markup)
                await state.set_state(default_state)
            else:
                await bot.send_message(chat_id=message.chat.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", reply_markup=back_to_menu_mrkp)
        else:
            await bot.send_message(chat_id=message.chat.id, text= "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [setMessageComment]. –û—à–∏–±–∫–∞: _{ex}")



@dp.callback_query(Text(text= ['change_comment']))
async def changeCommentAboutUser(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await state.set_state(FsmFillState.add_comment_state)

        id = callback.message.text.split("|")[1]
        await state.update_data(idForComment = id)

        await bot.send_message(chat_id = callback.from_user.id, text = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è |2", reply_markup=back_to_menu_mrkp)
    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [changeCommentAboutUser]. –û—à–∏–±–∫–∞: _{ex}")


@dp.callback_query(Text(text = ["delete_user"]))
async def deleteMessageHandler(callback : CallbackQuery, state : FSMContext):
    try:
        await callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        id = int(callback.message.text.split("|")[1])
        res = await DatabaseObject().deleteUser(id)
        if res:
            await bot.send_message(chat_id = callback.from_user.id, text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=back_to_menu_mrkp)
        else:
            await bot.send_message(chat_id = callback.from_user.id, text = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=back_to_menu_mrkp)
    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [deleteMessageHandler]. –û—à–∏–±–∫–∞: _{ex}")



#Add new user
@dp.callback_query(Text(text = ["add_new_user"]))
async def addNewUserHandler(callback : CallbackQuery, state : FSMContext):
    try:
        await  callback.answer()
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await state.set_state(FsmFillState.add_new_user_state)
        await bot.send_message(chat_id = callback.from_user.id, text = "–£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=back_to_menu_mrkp)

    except Exception as ex:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ [addNewUserHandler]. –û—à–∏–±–∫–∞: _{ex}")














def main():
    dp.startup.register(set_main_menu)

    if os.path.isfile("cfg.sample.yml"):
        os.rename("cfg.sample.yml", "cfg.yml")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info(db.startDatabaseInfo)

    asyncio.run(db.createTables())

    dp.run_polling(bot, skip_updates = True)

if __name__ == "__main__":
    main()
